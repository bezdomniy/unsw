---------------------------------------------------------------------------
-- COMP9315
-- Term 2
-- Assignment 1
-- Ilia Chibaev
-- z3218424
--
-- email.sql -
--    This file creates a new user-defined type to store parsed email
--    address data.
--
--
-- Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/email.source
--
---------------------------------------------------------------------------

-- the input function 'email_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 
-- 'emailaddr' does not exist yet but that's okay.

CREATE FUNCTION email_in(cstring)
   RETURNS emailaddr
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'email_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION email_out(emailaddr)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;


-- create the type.
CREATE TYPE emailaddr (
   internallength = VARIABLE,
   input = email_in,
   output = email_out,
   alignment = int4,
   storage = EXTERNAL
);


-----------------------------
-- Interfacing New Types with Indexes:
-----------------------------

-- defining the required operators
CREATE FUNCTION email_abs_lt(emailaddr, emailaddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_le(emailaddr, emailaddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_eq(emailaddr, emailaddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_ge(emailaddr, emailaddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_gt(emailaddr, emailaddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_neq(emailaddr, emailaddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_domain_eq(emailaddr, emailaddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_domain_neq(emailaddr, emailaddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_hash(emailaddr) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR < (
   leftarg = emailaddr, rightarg = emailaddr, procedure = email_abs_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
   leftarg = emailaddr, rightarg = emailaddr, procedure = email_abs_le,
   commutator = >= , negator = > ,
   restrict = scalarlesel, join = scalarlejoinsel
);
CREATE OPERATOR = (
   leftarg = emailaddr, rightarg = emailaddr, procedure = email_abs_eq,
   commutator = = ,
   negator = <> ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR >= (
   leftarg = emailaddr, rightarg = emailaddr, procedure = email_abs_ge,
   commutator = <= , negator = < ,
   restrict = scalargesel, join = scalargejoinsel
);
CREATE OPERATOR > (
   leftarg = emailaddr, rightarg = emailaddr, procedure = email_abs_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR <> (
   leftarg = emailaddr, rightarg = emailaddr, procedure = email_abs_neq,
   commutator = <> ,
   negator = = ,
   restrict = neqsel, join = neqjoinsel
);
CREATE OPERATOR ~ (
   leftarg = emailaddr, rightarg = emailaddr, procedure = email_abs_domain_eq,
   commutator = ~ , negator = !~ ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR !~ (
   leftarg = emailaddr, rightarg = emailaddr, procedure = email_abs_domain_neq,
   commutator = !~ , negator = ~ ,
   restrict = neqsel, join = neqjoinsel
);


-- create the support function too
CREATE FUNCTION email_abs_cmp(emailaddr, emailaddr) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

-- operator class used for sorting
CREATE OPERATOR CLASS email_btree_ops DEFAULT FOR TYPE emailaddr 
   USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       email_abs_cmp(emailaddr, emailaddr);
   ;

-- operator class used for hash index
CREATE OPERATOR CLASS email_abs_ops DEFAULT FOR TYPE emailaddr 
   USING hash AS
      OPERATOR        1       = ,
      FUNCTION        1       email_abs_hash(emailaddr);

-- --clean up the example
-- DROP TYPE emailaddr CASCADE;
